import numpy as np
import matplotlib.pyplot as plt
import cv2
import pandas as pd
from scipy.stats.stats import pearsonr
import networkx as nx
from sewar.full_ref import mse, rmse, psnr, uqi, ssim, ergas, scc, rase, sam, msssim, vifp
from dtaidistance import dtw_ndim



answer = [[398, 572], [367, 609], [388, 618], [393, 614], [398, 606], [404, 599], [410, 596], [415, 590], [421, 586], [424, 581], [429, 577], [434, 572], [438, 567], [441, 559], [446, 553], [451, 543], [456, 533], [462, 520], [468, 508], [479, 493], [490, 472], [493, 459], [504, 439], [513, 425], [525, 412], [539, 391], [552, 379], [559, 365], [569, 351], [580, 332], [594, 318], [605, 299], [623, 291], [645, 276], [661, 259], [674, 246], [688, 234], [696, 226], [705, 219], [712, 216], [716, 218], [717, 222], [719, 228], [719, 235], [719, 247], [718, 263], [722, 291], [730, 312], [733, 332], [739, 354], [746, 380], [757, 412], [764, 443], [771, 468], [775, 492], [777, 531], [772, 560], [768, 600], [759, 612], [761, 635], [610, 602], [588, 587], [569, 570], [550, 554], [533, 540], [514, 528], [499, 508], [487, 494], [473, 479], [459, 471], [444, 460], [430, 450], [418, 439], [407, 428], [394, 416], [382, 408], [374, 391], [363, 376], [357, 364], [353, 355], [348, 349], [345, 340], [342, 336], [347, 337], [351, 337], [359, 335], [370, 337], [385, 336], [402, 338], [421, 344], [437, 334], [461, 339], [486, 337], [520, 332], [552, 327], [585, 323], [609, 323], [641, 327], [669, 330], [705, 334], [744, 335], [774, 336], [796, 339], [795, 338], [863, 355], [892, 353], [925, 365], [943, 369], [966, 369], [986, 375], [1012, 380], [985, 391], [974, 394], [924, 408], [908, 417], [884, 428], [859, 439], [832, 445], [796, 461], [792, 462], [766, 484], [721, 484], [638, 541], [604, 564], [568, 579], [526, 597]]

check = [[111, 359], [113, 355], [115, 351], [118, 346], [120, 343], [123, 340], [126, 336], [128, 332], [133, 323], [134, 319], [139, 311], [141, 308], [142, 305], [144, 301], [146, 296], [146, 292], [148, 287], [149, 283], [150, 278], [153, 271], [154, 266], [155, 259], [158, 254], [159, 249], [161, 243], [162, 238], [164, 233], [166, 228], [168, 224], [170, 220], [172, 216], [174, 212], [176, 207], [179, 203], [181, 198], [184, 194], [187, 190], [190, 185], [192, 180], [195, 176], [198, 171], [200, 166], [203, 161], [206, 156], [209, 153], [212, 149], [214, 145], [217, 141], [220, 138], [223, 135], [226, 133], [229, 130], [234, 128], [238, 126], [243, 124], [247, 123], [253, 121], [259, 120], [266, 119], [272, 118], [279, 118], [285, 118], [292, 118], [298, 118], [305, 119], [311, 119], [318, 119], [325, 120], [332, 122], [339, 123], [346, 126], [353, 129], [359, 133], [364, 138], [369, 143], [374, 148], [379, 154], [384, 160], [387, 166], [391, 172], [395, 178], [397, 183], [400, 190], [403, 197], [405, 203], [406, 209], [407, 216], [409, 222], [411, 228], [412, 233], [412, 240], [412, 247], [410, 253], [408, 262], [404, 270], [404, 275], [404, 281], [404, 288], [405, 292], [406, 299], [407, 303], [409, 309], [410, 316], [412, 323], [414, 331], [418, 338], [423, 345], [430, 351], [438, 356], [445, 360], [453, 363], [462, 365], [469, 368], [477, 369], [486, 368], [495, 369], [503, 369], [510, 371], [520, 370], [528, 372], [535, 373], [543, 377], [551, 380], [558, 383], [565, 388], [573, 392], [579, 397], [587, 401], [594, 405], [601, 410], [607, 413], [612, 418], [617, 421], [622, 424], [627, 428], [632, 432]]

test = [[148, 305], [149, 302], [152, 283], [152, 283], [156, 274], [157, 270], [158, 266], [159, 263], [161, 259], [161, 256], [163, 253], [164, 250], [165, 246], [167, 244], [168, 241], [171, 238], [172, 234], [173, 230], [176, 225], [179, 217], [181, 208], [184, 194], [191, 181], [196, 166], [201, 151], [209, 137], [215, 119], [224, 103], [235, 87], [247, 72], [262, 57], [273, 48], [282, 41], [291, 36], [297, 32], [302, 31], [307, 31], [309, 31], [312, 32], [314, 33], [316, 36], [317, 40], [318, 46], [319, 54], [320, 64], [321, 75], [323, 86], [325, 99], [326, 113], [328, 130], [330, 146], [332, 161], [333, 179], [332, 192], [336, 222], [338, 234], [338, 247], [339, 261], [339, 270], [340, 278], [339, 287], [339, 295], [339, 300], [339, 305], [339, 310], [338, 312], [338, 314], [338, 317], [338, 320], [337, 324], [337, 327], [336, 330], [338, 335], [337, 341], [337, 347], [340, 352], [341, 355], [341, 356], [341, 356], [340, 352], [333, 344], [320, 330], [307, 319], [275, 295], [257, 281], [242, 269], [224, 256], [209, 244], [200, 234], [188, 225], [176, 214], [165, 208], [156, 203], [148, 196], [141, 191], [135, 186], [131, 180], [126, 175], [123, 170], [120, 167], [118, 165], [117, 164], [118, 163], [121, 163], [126, 161], [133, 161], [141, 159], [151, 157], [165, 155], [181, 154], [202, 153], [217, 150], [264, 149], [285, 144], [312, 143], [334, 145], [355, 146], [372, 147], [387, 149], [404, 150], [415, 152], [427, 153], [436, 155], [443, 155], [449, 156], [454, 156], [458, 157], [461, 158], [464, 159], [466, 160], [466, 162], [465, 164], [462, 166], [454, 169], [444, 176], [431, 183], [413, 189], [390, 199], [371, 215], [350, 227], [303, 250], [288, 266], [255, 281], [214, 308], [196, 321], [181, 331], [167, 341], [156, 350], [146, 359]]

s = (480, 640)



def setAnser(a):
    print(a)

def setcheck(c):
    print(c)

def drawPoint(points, size):
    check = points

    plt.ylim((0, size[0]))
    plt.xlim((0, size[1]))# for square canvas

    for ele in answer:
        plt.plot(ele[0], ele[1]*(-1)+size[0], marker="o", color="red")

    for ele in check:
        plt.plot(ele[0], ele[1]*(-1)+size[0], marker="o", color="green")


    plt.show()

def saveGraph1():
    plt.ylim((0, s[0]))
    plt.xlim((0, s[1]))# for square canvas

    for ele in answer:
        plt.plot(ele[0], ele[1]*(-1)+s[0], marker="o", color="red")

    plt.axis('off')
    plt.show()

def saveGraph2():
    plt.ylim((0, s[0]))
    plt.xlim((0, s[1]))# for square canvas

    for ele in check:
        plt.plot(ele[0], ele[1]*(-1)+s[0], marker="o", color="red")

    plt.axis('off')
    plt.show()

def checkSimilarity(points):
    check = points

    print(dtw_ndim.distance(np.array(check), np.array(answer)))

#drawPoint(test1, s)
#saveGraph1()
#saveGraph2()
"""""
blur = cv2.imread('C:/Users/sam/Desktop/test1.png')
org = cv2.imread('C:/Users/sam/Desktop/g2.png')
print("MSE: ", mse(blur,org))
print("RMSE: ", rmse(blur, org))
print("PSNR: ", psnr(blur, org))
print("SSIM: ", ssim(blur, org))
print("UQI: ", uqi(blur, org))
print("MSSSIM: ", msssim(blur, org))
print("ERGAS: ", ergas(blur, org))
print("SCC: ", scc(blur, org))
print("RASE: ", rase(blur, org))
print("SAM: ", sam(blur, org))
print("VIF: ", vifp(blur, org))
print()
blur = cv2.imread('C:/Users/sam/Desktop/Ntest1.png')
org = cv2.imread('C:/Users/sam/Desktop/Ng2.png')
print("MSE: ", mse(blur,org))
print("RMSE: ", rmse(blur, org))
print("PSNR: ", psnr(blur, org))
print("SSIM: ", ssim(blur, org))
print("UQI: ", uqi(blur, org))
print("MSSSIM: ", msssim(blur, org))
print("ERGAS: ", ergas(blur, org))
print("SCC: ", scc(blur, org))
print("RASE: ", rase(blur, org))
print("SAM: ", sam(blur, org))
print("VIF: ", vifp(blur, org))
"""
#print(dtw_ndim.distance(np.array(check), np.array(answer)))



